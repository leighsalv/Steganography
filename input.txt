from PIL import Image
import math
import sys

## ===== ENCODE =====================================

def encode(e_img):
    imgToEncode = Image.open(e_img+".jpg")

    # Open python code that will be used to store in the image
    code = open("input.txt","r")
    encode_msg = code.read()

    # Begin encoding the length of msg into the last 11 pixels
    pix = imgToEncode.load()
    width, height = imgToEncode.size
    w = width-1
    wStart = width-12
    h = height-1
    hStart = height - 2
    curr = 0 # counter for msg length

    msg_length = len(encode_msg)
    # 32 bits
    msg_length_str = str(bin((msg_length*16)+1))
    # Removes '0b'
    msg_length_str = msg_length_str[2:]
    # Number of bits
    msg_len_num = len(str(bin(msg_length)))

    for i in range (msg_len_num,31):
        msg_length_str = "0" + msg_length_str

    msg_len_num = len(msg_length_str)

    # Place length of message within the last 11 pixels
    for i in range (w,wStart,-1):

        # assign RGB colors based on image
        color = tuple(pix[i,h])
        r, g, b = color

        # change all LSB to 0
        if ((pix[i,h][0]%2) == 1):
            r -= 1
        if ((pix[i,h][1]%2) == 1):
            g -= 1
        if ((pix[i,h][2]%2) == 1):
            b -= 1

		# change each LSB of RGB pixel val to hide message
        ## R
        if curr < msg_len_num:
            r += int(msg_length_str[curr])
            curr += 1

            ##G
            if curr < msg_len_num:
                g += int(msg_length_str[curr])
                curr += 1

                ##B
                if curr < msg_len_num:
                    b += int(msg_length_str[curr])
                    pix[i,h] = (r,g,b)
                    curr += 1

                # Else leave the pixel values as is
                else:
                    pix[i,h] = (r,g,b)

            else:
                pix[i,h] = (r,g,b)
        else:
            pix[i,h] = (r,g,b)


    # Begin encoding the msg for the remaining pixels
    it = 0 # iterator for inputting msg
    msg = '' # holds code which is the hidden msg

    for i in range (0, msg_length):
        msg_str = bin(ord(encode_msg[i]))
        msg_str = msg_str[2:]
        msg_str = str(msg_str).zfill(8)
        msg += msg_str

    for i in range (wStart, -1, -1):

        color = tuple(pix[i,h])
        r, g, b = color

        if ((pix[i,h][0]%2) == 1):
            r -= 1
        if ((pix[i,h][1]%2) == 1):
            g -= 1
        if ((pix[i,h][2]%2) == 1):
            b -= 1

        ##R
        if (it < (len(msg)-1)):
            if (msg[it] == "1"):
                r += 1
                it += 1
            else:
                it+=1

            ##G
            if (it < (len(msg)-1)):
                if (msg[it] == "1"):
                    g += 1
                    it += 1
                else:
                    it+=1

                ##B
                if (it < (len(msg)-1)):
                    if (msg[it] == "1"):
                        b += 1
                        it += 1
                    else:
                        it+=1

        pix[i,h] = (r,g,b)

    for l in range (hStart,-1,-1):
        for i in range (w,-1,-1):
            color = tuple(pix[i,l])
            r, g, b = color
            if ((pix[i,l][0]%2) == 1):
                r -= 1
            if ((pix[i,l][1]%2) == 1):
                g -= 1
            if ((pix[i,l][2]%2) == 1):
                b -= 1

            if (it < (len(msg)-1)):
                if (msg[it] == "1"):
                    r += 1
                    it += 1
                else:
                    it+=1

                if (it < (len(msg)-1)):
                    if (msg[it] == "1"):
                        g += 1
                        it += 1
                    else:
                        it+=1

                    if (it < (len(msg)-1)):
                        if (msg[it] == "1"):
                            b += 1
                            it += 1
                        else:
                            it+=1
            pix[i,l] = (r,g,b)

    imgToEncode.save(e_img+".png")
    print "Message has been encoded."

## ===== DECODE =====================================
def decode(d_img):
    imgToDecode = Image.open(d_img+".png")
    # imgToDecode.show();

    # Get width and height of image
    width, height = imgToDecode.size

    # Get length of data stored in the last 11 pixels of image to decode
    pix = imgToDecode.load()
    msg_length = ''
    last_eleventh = 11
    w = width-1
    h = height-1

    for i in range (0, last_eleventh):
        # get the R,G,B pixel values from image to be decoded
        r, g, b = pix[w, h]
        msg_length += str(bin(r))[-1]
        msg_length += str(bin(g))[-1]
        msg_length += str(bin(b))[-1]
        if w == 0:
            w = width
            h -= 1
        w -= 1

    # Keep first 32 bits and cast it to an integer
    msg_length = msg_length[:32]
    msg_length = int(msg_length, 2)

    # Read the hidden text in the image to be decoded starting from 12th-last pixel
    pix_value = math.ceil(msg_length/3)
    msg_decoded = ''
    w = width - 12
    for i in range (0, int(pix_value)):
        # get the R,G,B values from image to be decoded
        r, g, b = pix[w, h]
        msg_decoded += str(bin(r))[-1]
        msg_decoded += str(bin(g))[-1]
        msg_decoded += str(bin(b))[-1]
        if w == 0:
            w = width
            h -= 1
        w -= 1

    # Print the hidden text and the length of text
    hidden_text = ''
    for i in range(0, len(msg_decoded), 8):
        hidden_text = hidden_text + ''.join(chr(int(msg_decoded[i:i+8],2)))

    print "decoded message is: ", hidden_text
    print "------"
    print "size of message is: ", int(msg_length), "bits (",msg_length/8, " characters long)."

## ===== MENU =======================================
def main():

    while True:

        print("\n\n============ MENU ============\n")
        print("type 'e' for encode\n")
        print("type 'd' for decode\n")
        print("type 'h' for help\n")
        print("type 'q' for quit\n")

        choice = raw_input("What would you like to do?\n")

        if choice=='e':
            e_img = raw_input("Type in the name of the .jpg image to be encoded (i.e. testImage)\n")
            encode(e_img)

        elif choice=='d':
            d_img = raw_input("Type in the name of the .png image to be decoded (i.e. testImage)\n")
            decode(d_img)

        elif choice=='h':
            print("to encode: type in the image name (make sure it's a jpg file). For example, testImage\n")
            print("to decode: type in the image name (make sure it's a png file). For example, testImage\n")
            print("to quit: type in 'q'\n")

        elif choice=='q':
            print("exiting")
            sys.exit(0)

        else:
            print("error")


if __name__ == "__main__":
    main()
